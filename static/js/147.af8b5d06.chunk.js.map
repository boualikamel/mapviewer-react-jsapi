{"version":3,"sources":["../node_modules/@arcgis/core/smartMapping/statistics/support/statsWorker.js","../node_modules/@arcgis/core/smartMapping/statistics/support/utils.js"],"names":["s","u","e","a","attribute","l","featuresJSON","r","normalizationType","normalizationField","minValue","c","maxValue","p","fieldType","m","field","valueExpression","normalizationTotal","viewInfoParams","f","d","i","v","t","values","supportsNullCount","n","useSampleStdDev","o","arcadeUtils","createFunction","getViewInfo","viewingMode","scale","spatialReference","forEach","attributes","createExecContext","executeFunction","parseFloat","push","sqlExpression","supportsSQLExpression","filter","length","count","nullcount","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isFinite","Math","min","max","sqrt","avg","stddev","sum","variance","ceil","log","LOG10E"],"mappings":"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","file":"static/js/147.af8b5d06.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport{isFinite as e}from\"../../../core/mathUtils.js\";import a from\"../../../geometry/SpatialReference.js\";import{isNullCountSupported as i,calculateStringStatistics as t,calculateStatistics as n,processStatsResult as o,getNormalizedValue as l}from\"./utils.js\";import{loadArcade as r}from\"../../../support/arcadeOnDemand.js\";let s=null;async function u(e){const{attribute:a,featuresJSON:l}=e,{normalizationType:r,normalizationField:s,minValue:u,maxValue:c,fieldType:p}=a,f=await m({field:a.field,valueExpression:a.valueExpression,normalizationType:r,normalizationField:s,normalizationTotal:a.normalizationTotal,viewInfoParams:a.viewInfoParams},l),d=i({normalizationType:r,normalizationField:s,minValue:u,maxValue:c}),v=\"string\"===p?t({values:f,supportsNullCount:d}):n({values:f,minValue:u,maxValue:c,useSampleStdDev:!r,supportsNullCount:d});return o(v,\"date\"===p)}async function m(i,t){if(!t)return[];const n=i.field,o=i.valueExpression,u=i.normalizationType,m=i.normalizationField,c=i.normalizationTotal,p=[],f=i.viewInfoParams;let d=null,v=null;if(o){if(!s){const{arcadeUtils:e}=await r();s=e}d=s.createFunction(o),v=f&&s.getViewInfo({viewingMode:f.viewingMode,scale:f.scale,spatialReference:new a(f.spatialReference)})}return t.forEach((a=>{const i=a.attributes;let t;if(o){const e=s.createExecContext(a,v);t=s.executeFunction(d,e)}else i&&(t=i[n]);if(u&&e(t)){const e=i&&parseFloat(i[m]);t=l(t,u,e,c)}p.push(t)})),p}export{m as getDataValues,u as summaryStatistics};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport e from\"../../../core/Error.js\";import{isSome as n}from\"../../../core/maybe.js\";import{isNumericField as t,numericTypes as l}from\"../../../layers/support/fieldUtils.js\";function o(e){const n=null!=e.normalizationField||null!=e.normalizationType,t=null!=e.minValue||null!=e.maxValue,l=!!e.sqlExpression&&e.supportsSQLExpression;return!n&&!t&&!l}function i(e){const{values:n,supportsNullCount:t}=e,l=n.filter((e=>null!=e)).length,o={count:l};return t&&(o.nullcount=n.length-l),o}function r(e){const{values:n,useSampleStdDev:t,supportsNullCount:l}=e;let o=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY,r=null,u=null,s=null,a=null,c=0;const f=null==e.minValue?-1/0:e.minValue,d=null==e.maxValue?1/0:e.maxValue;for(const p of n)Number.isFinite(p)?p>=f&&p<=d&&(r+=p,o=Math.min(o,p),i=Math.max(i,p),c++):\"string\"==typeof p&&c++;if(c&&null!=r){u=r/c;let e=0;for(const t of n)Number.isFinite(t)&&t>=f&&t<=d&&(e+=(t-u)**2);a=t?c>1?e/(c-1):0:c>0?e/c:0,s=Math.sqrt(a)}else o=null,i=null;const m={avg:u,count:c,max:i,min:o,stddev:s,sum:r,variance:a};return l&&(m.nullcount=n.length-c),m}function u(e,n){return n?([\"avg\",\"stddev\",\"variance\"].forEach((n=>{null!=e[n]&&(e[n]=Math.ceil(e[n]))})),e):e}function s(e,n,t,l){let o=null;switch(n){case\"log\":0!==e&&(o=Math.log(e)*Math.LOG10E);break;case\"percent-of-total\":Number.isFinite(l)&&0!==l&&(o=e/l*100);break;case\"field\":Number.isFinite(t)&&0!==t&&(o=e/t);break;case\"natural-log\":e>0&&(o=Math.log(e));break;case\"square-root\":e>0&&(o=e**.5)}return o}function a(e){const n=e.field,t=e.normalizationType,l=e.normalizationField;let o;return\"log\"===t?o=\"(NOT \"+n+\" = 0)\":\"field\"===t?o=\"(NOT \"+l+\" = 0)\":\"natural-log\"!==t&&\"square-root\"!==t||(o=`(${n} > 0)`),o}function c(n,t){return new e(n,t)}function f(e,n,t){const l=null!=n?e+\" >= \"+n:\"\",o=null!=t?e+\" <= \"+t:\"\";let i=\"\";return i=l&&o?p(l,o):l||o,i?\"(\"+i+\")\":\"\"}function d(e,n,t,l){let o=null;return n?n.name!==e.objectIdField&&-1!==l.indexOf(n.type)||(o=c(t,\"'field' should be one of these types: \"+l.join(\",\"))):o=c(t,\"'field' is not defined in the layer schema\"),o}function m(e,n,o){let i;return n?n.name!==e.objectIdField&&t(n)||(i=c(o,\"'field' should be one of these numeric types: \"+l.join(\",\"))):i=c(o,\"'field' is not defined in the layer schema\"),i}function p(e,t){let l=n(e)?e:\"\";return n(t)&&t&&(l=l?\"(\"+l+\") AND (\"+t+\")\":t),l}function h(e,n,t){const l=g({layer:e,fields:n});if(l.length)return c(t,\"Unknown fields: \"+l.join(\", \")+\". You can only use fields defined in the layer schema\");const o=b({layer:e,fields:n});return o.length?c(t,\"Unsupported fields: \"+o.join(\", \")+\". You can only use fields that can be fetched i.e. AdapterFieldUsageInfo.supportsStatistics must be true\"):void 0}function g(e){const n=e.layer;return e.fields.filter((e=>!n.getField(e)))}function b(e){const n=e.layer;return e.fields.filter((e=>{const t=n.getFieldUsageInfo(e);return!t||!t.supportsStatistics}))}export{r as calculateStatistics,i as calculateStringStatistics,c as createError,s as getNormalizedValue,f as getRangeExpr,a as getSQLFilterForNormalization,o as isNullCountSupported,p as mergeWhereClauses,u as processStatsResult,h as verifyBasicFieldValidity,d as verifyFieldType,m as verifyNumericField};\n"],"sourceRoot":""}