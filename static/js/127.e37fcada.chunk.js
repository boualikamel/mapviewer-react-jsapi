(this["webpackJsonpjsapi-create-react-app"]=this["webpackJsonpjsapi-create-react-app"]||[]).push([[127],{707:function(e,t,o){"use strict";o.r(t);var r=o(0),i=(o(7),o(74)),a=o(2),l=(o(6),o(10),o(1)),s=o(21),c=o(3),n=o(5),p=(o(11),o(12),o(9)),b=o(101),y=o(127),u=o(47),d=o(302),j=o(186),O=o(211),S=(o(52),o(148)),h=o(165),v=o(106),f=o(196),m=o(242),g=o(195),C=o(287),R=o(241);const k=["atom","xml"],w={base:b.a,key:"type",typeMap:{"simple-line":y.a},errorContext:"symbol"},F={base:b.a,key:"type",typeMap:{"picture-marker":d.a,"simple-marker":O.a},errorContext:"symbol"},x={base:b.a,key:"type",typeMap:{"simple-fill":j.a},errorContext:"symbol"};let M=class extends(Object(m.a)(Object(C.a)(Object(f.a)(Object(g.a)(Object(R.a)(Object(h.a)(S.a))))))){constructor(...e){super(...e),this.description=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.outSpatialReference=null,this.url=null,this.type="geo-rss"}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}get title(){const e=this._get("title");return e&&"defaults"!==this.originOf("title")?e:this.url?Object(n.k)(this.url,k)||"GeoRSS":e||""}set title(e){this._set("title",e)}readFeatureCollections(e,t){return t.featureCollection.layers.forEach((e=>{const t=e.layerDefinition.drawingInfo.renderer.symbol;t&&"esriSFS"===t.type&&t.outline&&-1!==t.outline.style.indexOf("esriSFS")&&(t.outline.style="esriSLSSolid")})),t.featureCollection.layers}load(e){const t=Object(a.i)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},e).then((()=>this._fetchService(t)),(()=>this._fetchService(t)))),Object(p.u)(this)}async _fetchService(e){const{data:t}=await Object(u.default)(i.a.geoRSSServiceUrl,{query:{url:this.url,refresh:!!this.loaded||void 0,outSR:this.outSpatialReference?JSON.stringify(this.outSpatialReference.toJSON()):void 0},signal:e});this.read(t,{origin:"service"})}};Object(r.a)([Object(l.b)()],M.prototype,"description",void 0),Object(r.a)([Object(l.b)({dependsOn:["url"],json:{origins:{service:{read:{source:"name",reader:e=>e||void 0}}}}})],M.prototype,"title",null),Object(r.a)([Object(l.b)()],M.prototype,"featureCollections",void 0),Object(r.a)([Object(s.a)("service","featureCollections",["featureCollection.layers"])],M.prototype,"readFeatureCollections",null),Object(r.a)([Object(l.b)(v.d)],M.prototype,"legendEnabled",void 0),Object(r.a)([Object(l.b)({types:w,json:{write:!0}})],M.prototype,"lineSymbol",void 0),Object(r.a)([Object(l.b)({type:["show","hide"]})],M.prototype,"listMode",void 0),Object(r.a)([Object(l.b)({types:F,json:{write:!0}})],M.prototype,"pointSymbol",void 0),Object(r.a)([Object(l.b)({types:x,json:{write:!0}})],M.prototype,"polygonSymbol",void 0),Object(r.a)([Object(l.b)({type:["GeoRSS"]})],M.prototype,"operationalLayerType",void 0),Object(r.a)([Object(l.b)()],M.prototype,"outSpatialReference",void 0),Object(r.a)([Object(l.b)(v.j)],M.prototype,"url",void 0),Object(r.a)([Object(l.b)({readOnly:!0,json:{read:!1},value:"geo-rss"})],M.prototype,"type",void 0),M=Object(r.a)([Object(c.a)("esri.layers.GeoRSSLayer")],M);var _=M;t.default=_}}]);