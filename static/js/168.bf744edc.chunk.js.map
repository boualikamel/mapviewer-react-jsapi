{"version":3,"sources":["../node_modules/@arcgis/core/layers/support/RasterWorker.js"],"names":["n","e","a","r","data","options","o","toJSON","pixelBlock","fromJSON","extent","m","this","symbolizer","symbolize","Promise","resolve","l","symbolizerJSON","histograms","rendererJSON","type","simpleStretch","srcPixelBlock","stretchParams","s","tileSize","maximumPyramidLevel","forEach","set","srcPixelBlocks","map","t","srcMosaicSize","alignmentInfo","coefs","i","destDimension","sampleSpacing","interpolation"],"mappings":"kOAI0VA,E,6HAAE,WAAaC,GAAb,eAAAC,EAAA,sEAA8BC,YAAEF,EAAEG,KAAKH,EAAEI,SAAzC,cAAsBC,EAAtB,yBAAyDA,GAAGA,EAAEC,UAA9D,2C,8EAAuE,SAAUJ,GAAGA,EAAEK,WAAWP,IAAEQ,SAASN,EAAEK,YAAYL,EAAEO,OAAOP,EAAEO,OAAOC,IAAEF,SAASN,EAAEO,QAAQ,KAAK,IAAMJ,EAAEM,KAAKC,WAAWC,UAAUX,GAAG,OAAOY,QAAQC,QAAQV,GAAGA,EAAEC,Y,qEAAU,WAAuBN,GAAvB,eAAAC,EAAA,sDAAgCU,KAAKC,WAAWI,IAAER,SAASR,EAAEiB,gBAAgBjB,EAAEkB,YAAY,mBAAmB,OAAOhB,EAAES,KAAKC,iBAAY,EAAOV,EAAEiB,aAAaC,QAAQT,KAAKC,WAAWO,aAAaD,WAAWlB,EAAEkB,YAAhN,gD,4EAA4N,SAAQhB,GAAG,IAAMG,EAAEM,KAAKC,WAAWS,cAAcrB,IAAEQ,SAASN,EAAEoB,eAAepB,EAAEqB,eAAe,OAAOT,QAAQC,QAAQV,GAAGA,EAAEC,Y,0CAAU,SAA6BJ,GAAG,IAAMsB,EAAEnB,YAAEL,IAAEQ,SAASN,EAAEoB,gBAAgB,OAAOR,QAAQC,QAAQS,K,mBAAG,SAAMtB,GAAG,IAAMG,EAAEmB,YAAExB,IAAEQ,SAASN,EAAEoB,eAAepB,EAAEuB,SAASvB,EAAEwB,qBAAqB,OAAOrB,GAAGA,EAAEsB,SAAS,SAAC3B,EAAEE,GAAKG,EAAEuB,IAAI1B,EAAE,MAAMF,OAAE,EAAOA,EAAEM,aAAaQ,QAAQC,QAAQV,K,uEAAG,WAAyBH,GAAzB,mBAAAD,EAAA,yDAAkCI,EAAEH,EAAE2B,eAAeC,KAAK,SAAA5B,GAAC,OAAEA,EAAE,IAAIF,IAAEE,GAAG,QAAOsB,EAAEO,YAAE1B,EAAEH,EAAE8B,cAAc,KAAK,KAAK9B,EAAE+B,eAAmB/B,EAAEgC,MAAtI,yCAAmJV,GAAGA,EAAElB,UAAxJ,cAAuKU,EAAEmB,YAAEX,EAAEtB,EAAEkC,cAAclC,EAAEgC,MAAMhC,EAAEmC,cAAcnC,EAAEoC,eAAvN,kBAA6OtB,GAAGA,EAAEV,UAAlP,2C,8DAA2QP","file":"static/js/168.bf744edc.chunk.js","sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.20/esri/copyright.txt for details.\n*/\nimport\"../../geometry.js\";import e from\"./PixelBlock.js\";import{decode as r}from\"./rasterFormats/RasterCodec.js\";import{estimateStatisticsHistograms as o,split as s,mosaic as t,approximateTransform as i}from\"./rasterFunctions/pixelUtils.js\";import l from\"../../renderers/support/RasterSymbolizer.js\";import m from\"../../geometry/Extent.js\";class n{async decode(e){const o=await r(e.data,e.options);return o&&o.toJSON()}symbolize(r){r.pixelBlock=e.fromJSON(r.pixelBlock),r.extent=r.extent?m.fromJSON(r.extent):null;const o=this.symbolizer.symbolize(r);return Promise.resolve(o&&o.toJSON())}async updateSymbolizer(e){var r;this.symbolizer=l.fromJSON(e.symbolizerJSON),e.histograms&&\"rasterStretch\"===(null==(r=this.symbolizer)?void 0:r.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(r){const o=this.symbolizer.simpleStretch(e.fromJSON(r.srcPixelBlock),r.stretchParams);return Promise.resolve(o&&o.toJSON())}estimateStatisticsHistograms(r){const s=o(e.fromJSON(r.srcPixelBlock));return Promise.resolve(s)}split(r){const o=s(e.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return o&&o.forEach(((e,r)=>{o.set(r,null==e?void 0:e.toJSON())})),Promise.resolve(o)}async mosaicAndTransform(r){const o=r.srcPixelBlocks.map((r=>r?new e(r):null)),s=t(o,r.srcMosaicSize,null,null,r.alignmentInfo);if(!r.coefs)return s&&s.toJSON();const l=i(s,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation);return l&&l.toJSON()}}export default n;\n"],"sourceRoot":""}